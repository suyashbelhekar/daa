import java.util.*;

public class FordFulkerson {

    private static boolean bfs(int[][] residualGraph, int source, int sink, int[] parent) {
        int V = residualGraph.length;
        boolean[] visited = new boolean[V];
        Queue<Integer> queue = new LinkedList<>();

        queue.offer(source);
        visited[source] = true;
        parent[source] = -1;

        while (!queue.isEmpty()) {
            int u = queue.poll();

            for (int v = 0; v < V; v++) {
                if (!visited[v] && residualGraph[u][v] > 0) {
                    queue.offer(v);
                    parent[v] = u;
                    visited[v] = true;
                }
            }
        }

        return visited[sink]; 
    }

    public static int fordFulkerson(int[][] graph, int source, int sink) {
        int V = graph.length;
        int[][] residualGraph = new int[V][V];

        for (int u = 0; u < V; u++) {
            for (int v = 0; v < V; v++) {
                residualGraph[u][v] = graph[u][v];
            }
        }

        int[] parent = new int[V];
        int maxFlow = 0;

        while (bfs(residualGraph, source, sink, parent)) {
          
            int pathFlow = Integer.MAX_VALUE;
            int v = sink;
            while (v != source) {
                int u = parent[v];
                pathFlow = Math.min(pathFlow, residualGraph[u][v]);
                v = u;
            }

            
            v = sink;
            while (v != source) {
                int u = parent[v];
                residualGraph[u][v] -= pathFlow;
                residualGraph[v][u] += pathFlow;
                v = u;
            }

          
            maxFlow += pathFlow;
        }

        return maxFlow;
    }

   
    public static void main(String[] args) {
       
        int[][] graph = {
            //0 1 2 3 4 5
            {0, 16, 13, 0, 0, 0},  // 0
            {0, 0, 10, 12, 0, 0},  // 1
            {0, 4, 0, 0, 14, 0},   // 2
            {0, 0, 9, 0, 0, 20},   // 3
            {0, 0, 0, 7, 0, 4},    // 4
            {0, 0, 0, 0, 0, 0}     // 5
        };

        int source = 0;
        int sink = 5;

        System.out.println("The maximum possible flow is: " + fordFulkerson(graph, source, sink));
    }
}
